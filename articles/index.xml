<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on tyamagu2.xyz</title>
    <link>http://tyamagu2.xyz/articles/</link>
    <description>Recent content in Articles on tyamagu2.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 02 May 2016 23:05:50 +0900</lastBuildDate>
    <atom:link href="http://tyamagu2.xyz/articles/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go で ping</title>
      <link>http://tyamagu2.xyz/articles/go_ping/</link>
      <pubDate>Mon, 02 May 2016 23:05:50 +0900</pubDate>
      
      <guid>http://tyamagu2.xyz/articles/go_ping/</guid>
      <description>

&lt;p&gt;Go で ping を作った。&lt;a href=&#34;https://github.com/tyamagu2/go-ping&#34;&gt;https://github.com/tyamagu2/go-ping&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Raw Socket を使って ICMP の Echo Message を送り、Echo Reply Message を受け取っている。
またその際の RTT やパケロス率を計算して表示してくれる。IPv6 には対応していない。&lt;/p&gt;

&lt;p&gt;以下、作成の記録。&lt;/p&gt;

&lt;h3 id=&#34;ping-の仕組み:d7d264d2e335417a34bb27e8ee811218&#34;&gt;ping の仕組み&lt;/h3&gt;

&lt;p&gt;まずは ping の仕組みを調べるところから。おもむろに手元の MBP で &lt;code&gt;man ping&lt;/code&gt; してマニュアルを開く。
以下 BSD System Manager&amp;rsquo;s Manual PING(8) より抜粋。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NAME
     ping -- send ICMP ECHO_REQUEST packets to network hosts

...

ICMP PACKET DETAILS
    ....
     If the data space is at least eight bytes large, ping uses the first eight bytes of this space to include a timestamp which it uses in the computation of round trip times.  If
     less than eight bytes of pad are specified, no round trip times are given.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下ざっくりと説明。&lt;/p&gt;

&lt;p&gt;ICMP というのはそういうプロトコル。ping は ICMP の ECHO_REQUEST を相手に送る。
ICMP の詳細は後述するが、ECHO_REQUEST を送ったら ECHO_REPLY が返ってくる。ECHO なのでデータの中身は同じ。
そのデータの先頭 8 byte にタイムスタンプを含めておいて、RTT を計算する、という仕組みになっている。
データにタイムスタンプが含まれていることは RTT の計算に必須ではないのだけど、
こうしておけばステートレスにできて楽、ということだと思われる。&lt;/p&gt;

&lt;h3 id=&#34;icmp:d7d264d2e335417a34bb27e8ee811218&#34;&gt;ICMP&lt;/h3&gt;

&lt;p&gt;ICMP は Internet Control Mesage Protocol のこと。&lt;a href=&#34;https://tools.ietf.org/html/rfc792&#34;&gt;RFC 792&lt;/a&gt; で定義されている。
ホスト間のやり取り、例えばデータグラムの処理に関するエラーの報告などの用途に使うものとのこと。
あたかも IP の上位層のように IP の機能を使うけど、ICMP も IP の一部で、
IP を実装するモジュールは必ず ICMP も実装しないといけない。&lt;/p&gt;

&lt;p&gt;ICMP には複数の Message が定義されている。主にエラー報告に利用されるだけあって、
&lt;code&gt;Destination Unreachable Message&lt;/code&gt; とか &lt;code&gt;Time Exceeded Message&lt;/code&gt; のようにエラーの内容を示す Message が多い。
ping で使うのはこのうちの &lt;code&gt;Echo Message&lt;/code&gt; および &lt;code&gt;Echo Reply Message&lt;/code&gt; ということになる。&lt;/p&gt;

&lt;p&gt;ICMP Message は IP パケットのペイロードに乗っけることになる。
IP パケットのヘッダーにどのような値をセットすべきかについても RFC に記載がある。
特にポイントになるのは、Protocol フィールドに ICMP を表す 1 を指定することぐらい。&lt;/p&gt;

&lt;h3 id=&#34;echo-echo-reply-message-のフォーマット:d7d264d2e335417a34bb27e8ee811218&#34;&gt;Echo &amp;amp; Echo Reply Message のフォーマット&lt;/h3&gt;

&lt;p&gt;こうなっている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |     Type      |     Code      |          Checksum             |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |           Identifier          |        Sequence Number        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |     Data ...
    +-+-+-+-+-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type はどの ICMP Message かを表すフィールド。Echo だと 8、Echo Reply だと 0 になる。Code は 0 固定。
Checksum は Type から始まる ICMP Message 全体の Internet Checksum。計算方法は &lt;a href=&#34;https://tools.ietf.org/html/rfc1071&#34;&gt;RFC 1071&lt;/a&gt; に書いてある。&lt;/p&gt;

&lt;p&gt;Identifier と Sequence Number は、Echo と Reply をマッチングするために使う。
例えば複数のプロセスが同じホストに Echo Message を送っていると、自分宛ての Reply かわからなくなる。
そのため、Identifier にプロセス固有の値を入れておくようにする。
また、同じプロセスから複数の Echo Message を送る場合、IP は到達保証も到達順序保証もしないので、
やはり Echo と Reply の対応がわからなくなる。そこで、Echo ごとに Sequence Number をインクリメントしておく。
というような使い方が一般的な模様。&lt;/p&gt;

&lt;h3 id=&#34;tcpdump-で-echo-echo-reply-message-を見る:d7d264d2e335417a34bb27e8ee811218&#34;&gt;tcpdump で Echo &amp;amp; Echo Reply Message を見る&lt;/h3&gt;

&lt;p&gt;実際に見てみる。以下は上から順番に、1 つ目の Echo Message、1 つ目の Echo Reply Message、2 つ目の Echo Message、2 つ目の Echo Reply Message。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;01:29:33.027715 IP 10.0.1.3 &amp;gt; pages.github.com: ICMP echo request, id 64652, seq 0, length 64
0x0000:  4500 0054 6cd7 0000 4001 4616 0a00 0103
0x0010:  c01e fc9a 0800 1e5a fc8c 0000 5726 2eed
0x0020:  0000 6c02 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637
01:29:33.206876 IP pages.github.com &amp;gt; 10.0.1.3: ICMP echo reply, id 64652, seq 0, length 64
0x0000:  45c0 0054 a1fe 0000 3401 1c2f c01e fc9a
0x0010:  0a00 0103 0000 265a fc8c 0000 5726 2eed
0x0020:  0000 6c02 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637
01:29:34.028842 IP 10.0.1.3 &amp;gt; pages.github.com: ICMP echo request, id 64652, seq 1, length 64
0x0000:  4500 0054 7ba2 0000 4001 374b 0a00 0103
0x0010:  c01e fc9a 0800 19f0 fc8c 0001 5726 2eee
0x0020:  0000 706a 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637
01:29:34.207647 IP pages.github.com &amp;gt; 10.0.1.3: ICMP echo reply, id 64652, seq 1, length 64
0x0000:  45c0 0054 1ac1 0000 3401 a36c c01e fc9a
0x0010:  0a00 0103 0000 21f0 fc8c 0001 5726 2eee
0x0020:  0000 706a 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0 〜 19 オクテットまでが IP ヘッダーで、20 オクテット目からが ICMP Message。&lt;/p&gt;

&lt;p&gt;1 個目の Echo と Reply の ICMP ヘッダー以降を抜き出してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0x0010:            0800 1e5a fc8c 0000 5726 2eed
0x0020:  0000 6c02 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637

0x0010:            0000 265a fc8c 0000 5726 2eed
0x0020:  0000 6c02 0809 0a0b 0c0d 0e0f 1011 1213
0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
0x0050:  3435 3637
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0 オクテット目、つまり Type が Echo は 08、Reply は 00 になっている。
4, 5 オクテット目は ID で、上に載せた 2 個目の Echo/Reply とも一致している。
6, 7 オクテット目は Sequence Number で 0000。上の 2 個目の Echo/Reply では 0001 で確かにインクリメントされている。&lt;/p&gt;

&lt;p&gt;8 オクテット目以降の Data は Echo/Reply で一致している事がわかる。
9 オクテット目からの 8 オクテットはタイムスタンプ担っていて、それ以降はどうやら単にインクリメントしたダミーデータらしい。&lt;/p&gt;

&lt;h3 id=&#34;raw-socket:d7d264d2e335417a34bb27e8ee811218&#34;&gt;Raw Socket&lt;/h3&gt;

&lt;p&gt;ping を作るには、ICMP の Echo Message を送れば良いことは分かった。次はどうやってアプリケーションから ICMP、というか IP パケットを送ればよいのかが疑問となる。&lt;/p&gt;

&lt;p&gt;調べた結果、これには &lt;a href=&#34;http://linux.die.net/man/7/raw&#34;&gt;Raw Socket&lt;/a&gt; を使うことになる。
リンク先に書いてあるとおり、Raw Socket とは IP を使ったプロトコルをユーザースペースで実装するためのソケット。
IP を使ったプロトコルというのはつまり、ICMP とか TCP、UDP といったプロトコル。&lt;/p&gt;

&lt;p&gt;通常のソケットでは Transport Layer のプロトコルを TCP とか UDP とか指定して使うけど、
Raw Socket を使えば直接 IP パケットを送受信できる。なので TCP とか UDP みたいなプロトコルを自分でつくる事ができる。
ping の場合は ICMP のパケットを自分で Raw Socket を介して送受信することになる（つまり ICMP の一部を自分で実装する）。&lt;/p&gt;

&lt;p&gt;ちなみに、Raw Socket を使えるのは所有者の UID が 0（スーパーユーザー）または CAP_NET_RAW というケイパビリティがセットされたプロセスのみとなる。
じゃあ ping はなんで誰でも使えるのかというと、ping は所有者が root で setuid しているから。&lt;/p&gt;

&lt;p&gt;それから、ちゃんとしたソースをまだ見つけられてないんだけど、Raw Socket じゃなくて UDP Socket（SOCK_RAW じゃなくて SOCK_DGRAM）を使えば、
スーパーユーザーじゃなくても Echo などの一部の ICMP メッセージを利用することが可能らしい。以下にそれらしきことが書いてある。
まあでも、今回は Raw Socket を使うことにする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.freebsd.org/cgi/man.cgi?query=icmp&amp;amp;apropos=0&amp;amp;sektion=0&amp;amp;manpath=Darwin+8.0.1%2Fppc&amp;amp;format=html&#34;&gt;http://www.freebsd.org/cgi/man.cgi?query=icmp&amp;amp;apropos=0&amp;amp;sektion=0&amp;amp;manpath=Darwin+8.0.1%2Fppc&amp;amp;format=html&lt;/a&gt;
&lt;a href=&#34;https://github.com/golang/net/blob/master/icmp/listen_posix.go#L25-L28&#34;&gt;https://github.com/golang/net/blob/master/icmp/listen_posix.go#L25-L28&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;go-で実装:d7d264d2e335417a34bb27e8ee811218&#34;&gt;Go で実装&lt;/h3&gt;

&lt;p&gt;いよいよ Go で実装する。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://github.com/golang/net&#34;&gt;github.com/golang/net&lt;/a&gt; には &lt;a href=&#34;https://github.com/golang/net/tree/master/icmp&#34;&gt;icmp のパッケージ&lt;/a&gt;もあるし、
&lt;a href=&#34;https://github.com/golang/net/blob/master/icmp/ping_test.go&#34;&gt;それを使って ping するテスト&lt;/a&gt;もある。
でもこれを使うと楽しみ半減なので、困ったときに参考にするだけに留める。&lt;/p&gt;

&lt;p&gt;まず、Raw Socket を使うには &lt;a href=&#34;https://golang.org/pkg/net/#Dial&#34;&gt;net.Dial&lt;/a&gt; を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conn, err := net.Dial(&amp;quot;ip4:1&amp;quot;, ip.String())
...
wn, err = conn.Write(mb)
...
rn, err := conn.Read(rb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;code&gt;&amp;quot;ip4:1&amp;quot;&lt;/code&gt; の &lt;code&gt;ip4&lt;/code&gt; は IPv4、&lt;code&gt;1&lt;/code&gt; はプロトコル番号で ICMP を指す。Write でデータを送信、Read で受け取る。&lt;/p&gt;

&lt;p&gt;次に ICMP パケットの作成について。ネットワークバイトオーダー（= Big Endian）に変換するには、
&lt;a href=&#34;https://golang.org/pkg/encoding/binary/#ByteOrder&#34;&gt;encoding/binary の ByteOrder インターフェース&lt;/a&gt; を使う。
Checksum の計算には、上でも書いた &lt;a href=&#34;https://tools.ietf.org/html/rfc1071&#34;&gt;RFC 1071&lt;/a&gt; に C での実装方法が載っていたので参考にした。
下では省略しているけど、ID にはプロセス ID の下位 16 ビットを、Seq には 0 から順次インクリメントした番号を、
Data には &lt;a href=&#34;https://golang.org/pkg/time/#Time&#34;&gt;Time&lt;/a&gt; オブジェクトを Marshal したものをセットしている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Type uint8

const (
    ECHO_REPLY Type = 0
    ECHO       Type = 8
)

type EchoMessage struct {
    Type     Type
    Code     uint8
    Checksum uint16
    ID       uint16
    Seq      uint16
    Data     []byte
}

func (m *EchoMessage) Marshal() []byte {
    b := make([]byte, 8+len(m.Data))
    b[0] = byte(m.Type)
    b[1] = byte(m.Code)
    b[2] = 0
    b[3] = 0
    binary.BigEndian.PutUint16(b[4:6], m.ID)
    binary.BigEndian.PutUint16(b[6:8], m.Seq)
    copy(b[8:], m.Data)
    cs := checksum(b)
    b[2] = byte(cs &amp;gt;&amp;gt; 8)
    b[3] = byte(cs)
    return b
}

func checksum(b []byte) uint16 {
    count := len(b)
    sum := uint32(0)
    for i := 0; i &amp;lt; count-1; i += 2 {
        sum += uint32(b[i])&amp;lt;&amp;lt;8 | uint32(b[i+1])
    }
    if count&amp;amp;1 != 0 {
        sum += uint32(b[count-1]) &amp;lt;&amp;lt; 8
    }
    for (sum &amp;gt;&amp;gt; 16) &amp;gt; 0 {
        sum = (sum &amp;amp; 0xffff) + (sum &amp;gt;&amp;gt; 16)
    }
    return ^(uint16(sum))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;受信時にも &lt;code&gt;binary.BigEndian&lt;/code&gt; を使って、今度はネットワークバイトオーダーからネイティブのバイトオーダーに戻す。
また、Raw Socket から読み込んだパケットには IP ヘッダーも含まれているので、読み飛ばす必要がある。
そのため、まず IP ヘッダーに含まれる IP ヘッダー長フィールドを読む必要がある。
ICMP メッセージを読み取ったら、今度は ID が一致していること、Type が 0、つまり Echo Reply Message であることを確認する。
あとは Data にセットされた送信時刻を取り出して、受信時刻から引いて RTT を計算する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func ParseEchoMessageWithIPv4Header(b []byte) (*EchoMessage, error) {
	// IHL * 4 bytes
	hlen := int(b[0]&amp;amp;0x0f) &amp;lt;&amp;lt; 2
	b = b[hlen:]
	m := &amp;amp;EchoMessage{
		Type:     Type(b[0]),
		Code:     uint8(b[1]),
		Checksum: uint16(binary.BigEndian.Uint16(b[2:4])),
		ID:       uint16(binary.BigEndian.Uint16(b[4:6])),
		Seq:      uint16(binary.BigEndian.Uint16(b[6:8])),
	}
	m.Data = make([]byte, len(b)-8)
	copy(m.Data, b[8:])
	return m, nil
}

...
if rm.Type == ECHO_REPLY &amp;amp;&amp;amp; rm.ID == id {
	err = sent_at.UnmarshalBinary(rm.Data)
	if err != nil {
		fmt.Fprintf(os.Stderr, &amp;quot;Time.UnmarshalBinary:&amp;quot;, err)
	}
	rtt := received_at.Sub(sent_at)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そんな感じで ping ができた。あとは goroutine を作って、Timer で 1 秒おきに Echo Message を送るようにしたり、
SIGINT のハンドラを設定して、exit 前に ping っぽく RTT やパケロス率などの統計情報を出すようにした。
ping の出力結果と見比べてみると、RTT もそれっぽいし、良さそう。やったね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;  sudo go run main.go tyamagu2.xyz
PING tyamagu2.xyz ( 192.30.252.154 )
seq = 0 time = 179.915245ms
seq = 1 time = 178.756511ms
seq = 2 time = 179.783102ms
seq = 3 time = 179.712126ms
^C
---- tyamagu2.xyz ping statistics  -----
4 packets transmitted, 4 packets received, 0 % packet loss
min/max/avg =  178.756511ms / 179.915245ms / 179.541746ms

&amp;gt; ping tyamagu2.xyz
PING tyamagu2.xyz (192.30.252.154): 56 data bytes
64 bytes from 192.30.252.154: icmp_seq=0 ttl=52 time=179.688 ms
64 bytes from 192.30.252.154: icmp_seq=1 ttl=52 time=180.406 ms
64 bytes from 192.30.252.154: icmp_seq=2 ttl=52 time=180.126 ms
64 bytes from 192.30.252.154: icmp_seq=3 ttl=52 time=180.013 ms
64 bytes from 192.30.252.154: icmp_seq=4 ttl=52 time=179.822 ms
^C
--- tyamagu2.xyz ping statistics ---
5 packets transmitted, 5 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 179.688/180.011/180.406/0.249 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;なんとなく作ってみたけど、結構楽しかった。これまで A Tour of Go やっただけだったので、実際に channel 使ってみたりとか、
net パッケージのコード読んだりとか良い勉強になった。C の ping のコードもいくつかざっと読んだし、
ICMP にも詳しくなったし、tcpdump と ping の man ページもじっくり読めたし。
モチベーションが続けば、もうちょっとコードを精査して整理したりしたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Code Jam 2016 Qualification Round</title>
      <link>http://tyamagu2.xyz/articles/google_code_jam_2016_qualification_round/</link>
      <pubDate>Sun, 10 Apr 2016 21:46:37 +0900</pubDate>
      
      <guid>http://tyamagu2.xyz/articles/google_code_jam_2016_qualification_round/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://code.google.com/codejam/&#34;&gt;Google Code Jam 2016&lt;/a&gt; の Qualification Round をやった。
A と B しか解いてないけど、どちらも Large も解けたので Round 1 には進出できた。
C と D はできなかったんだけど、夜にお酒が入ってたのがだめなんだ！って自分に言い訳した。
でも朝起きてフレッシュな気持ちでやってみたら、D の Large 以外はできた。D の Large はわからん。&lt;/p&gt;

&lt;p&gt;ちなみに全部 ruby で回答した。本当は C++ でやろうと思ってたんだけど、
疲れていので慣れてる ruby で楽することにした。&lt;/p&gt;

&lt;h3 id=&#34;problem-a-counting-sheep:a4d47ca2ceb0ea4e1c107812a5c788b5&#34;&gt;Problem A. Counting Sheep&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;整数 N が与えられる。&lt;/li&gt;
&lt;li&gt;N, 2 * N, 3 * N, &amp;hellip; とカウントしていって、各桁に 0 〜 9 が最低一回出現した時の数字を答えよ。&lt;/li&gt;
&lt;li&gt;永遠にカウントする（0 ~ 9 のうち出てこない数字がある）場合は INSOMNIA と答えよ。&lt;/li&gt;
&lt;li&gt;Small は 0 ≤ N ≤ 200。Large は 0 ≤ N ≤ 106。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INSOMNIA なパターンは N = 0 の場合だけのはず。
難しく考えずに N から順番に数字を見ていき、0 ~ 9 が全部出たときの数字を答えたら通った。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case_count = gets.to_i
case_count.times do |t|
  n = gets.to_i

  if n == 0
    puts &amp;quot;Case ##{t+1}: INSOMNIA&amp;quot;
    next
  end

  s = Set.new
  x = 0
  while s.size &amp;lt; 10
    x += n
    x.to_s.each_char { |c| s &amp;lt;&amp;lt; c }
  end

  puts &amp;quot;Case ##{t+1}: #{x}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;problem-b-revenge-of-the-pancakes:a4d47ca2ceb0ea4e1c107812a5c788b5&#34;&gt;Problem B. Revenge of the Pancakes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;パンケーキのスタックがある。&lt;/li&gt;
&lt;li&gt;パンケーキは表か裏を向いている。&lt;/li&gt;
&lt;li&gt;スタックの一番上から任意の枚数の連続したパンケーキを反転させることができる。&lt;/li&gt;
&lt;li&gt;すべてのパンケーキを表にするための最小の反転回数を答えよ。&lt;/li&gt;
&lt;li&gt;Small は 1 ≤ パンケーキの枚数 ≤ 10。Large は 1 ≤ パンケーキの枚数 ≤ 100。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;幅優先探索とかダイクストラ法だと Large がダメなので、A* でやってみることにした。&lt;/p&gt;

&lt;p&gt;連続した裏のパンケーキは一度で反転できるので、
裏のパンケーキが連続した部分がいくつあるかをその状態のコストにすれば良さそう。
例えば &lt;code&gt;++--++--&lt;/code&gt;（左がスタックの一番上、+ は表、- は裏）のコストは 2、みたいな。
ただ、それだとこの例を全部反転させた &lt;code&gt;--++--++&lt;/code&gt; のコストも 2 としてしまうのはおかしい。
より単純なケースで考えると、&lt;code&gt;--++&lt;/code&gt; のように先頭から連続する裏のパンケーキは、反転 1 回ですべて表にできる。
一方 &lt;code&gt;++--&lt;/code&gt; は 2 回反転が必要。ということで、先頭から裏のパンケーキが連続している場合はコストを 1 足す。
それ以降の裏のパンケーキが連続する部分についてはコストを 2 足す、ということにした。
例えば &lt;code&gt;--++--++---++&lt;/code&gt; ならコストは 5 になる。んで、Large は 10 秒ぐらいかかったけど、チェック通った。&lt;/p&gt;

&lt;p&gt;ただ、朝起きてよくよく考えてみたら、上記のコストってそのまま必要な最小回数な気がしてきた。
先頭から連続する裏のパンケーキは 1 回反転させれば全部表にできる。
また、先頭からは表が連続しており、次に裏が連続していた場合、全体を反転するのに 1 回、
その後先頭から連続する裏面を反転するのにプラス 1 回で 2 回。
もし連続する裏の部分が複数ある場合、例えば &lt;code&gt;++--++--++&lt;/code&gt; の場合、
一番下にある裏向きのパンケーキまで全部反転し（&lt;code&gt;--++--++++&lt;/code&gt;）、
更に再度一番下にある裏向きのパンケーキまで全部反転すれば（&lt;code&gt;++--++++++&lt;/code&gt;）、
2 回の反転で連続する裏の部分が 1 箇所減った。感覚的にはこれが最小の手数っぽく思える。
実際この方法で出した答えで練習モードのチェックに通った。結果コードもすっきり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case_count = gets.to_i

def distance(stack)
  d = 0
  prev = true

  stack.each do |x|
    d += 2 if !x &amp;amp;&amp;amp; prev
    prev = x
  end

  d -= 1 unless stack[0]
  d
end

case_count.times do |t|
  stack = gets.chomp.each_char.map { |c| c == &#39;+&#39; }

  puts &amp;quot;Case ##{t+1}: #{distance(stack)}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;problem-c-coin-jam:a4d47ca2ceb0ea4e1c107812a5c788b5&#34;&gt;Problem C. Coin Jam&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;jamicoin という、N 個の数字からなる文字列がある。

&lt;ul&gt;
&lt;li&gt;すべての位は 0 か 1。&lt;/li&gt;
&lt;li&gt;最大と最小の位は必ず 1。&lt;/li&gt;
&lt;li&gt;文字列を 2 〜 10 進数として評価した値はいずれも素数でない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;J 個の jamicoin と、それらを 2 〜 10 進数として評価したときの non-trivial な（1 とそれ自身でない）約数を答えよ。&lt;/li&gt;
&lt;li&gt;テストケースは Small/Large ともに 1 個だけで、Small は N = 16、J = 50。Large は N = 32、N = 500。&lt;/li&gt;
&lt;li&gt;最低 J 個は jamicoin が存在することは保証されている。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初は、事前に &lt;code&gt;100...001 (base 2)&lt;/code&gt; から &lt;code&gt;111...111 (base 10)&lt;/code&gt; までの全部の数値の約数を一個ずつ見つけておくことでどうにかする方向で考えてみた。
事前に約数を見つけておけば、&lt;code&gt;100...001&lt;/code&gt; から &lt;code&gt;111...111&lt;/code&gt; までを順番に試していって、
それぞれ 2 〜 10 進数で評価して、約数があるかどうか見ていけば良さそう、とう考え。
ただ、流石にこれじゃあ計算量多すぎて無理だなーと思いつつ、一応やってみた。案の定ダメだった。&lt;/p&gt;

&lt;p&gt;ということで翌朝アプローチを変えてみることにした。
&lt;code&gt;100...001&lt;/code&gt; から &lt;code&gt;111...111&lt;/code&gt; までを順番に見ていき、
2 〜 10 進数として評価した値が素数かどうかを判定する。
素数じゃなかったら約数を見つける。
事前に約数を見つけたりはしない。&lt;/p&gt;

&lt;p&gt;とはいえ、素数かどうかの判定方法なんて、エラトステネスの篩か素因数分解するかしか知らないけど、どちらも時間かかりすぎて無理。
しょうがないので、高速に素数か判定する方法をググった結果、Stackoveflow の導きにより Miller-Rabin primality test という方式に行き着いた。
あんまり理論は理解してないけど、とりあえずこれで素数の高速判定は問題なし。&lt;/p&gt;

&lt;p&gt;次に、素数じゃないとわかったら約数を見つけないといけない。
でも、約数の候補を全部試していくのは時間的に無理そう。
よくよく問題を見ると、対象範囲のすべての jamicoin ではなく J 個の jamicoion を見つけろと言っている。
じゃあたぶん、ある程度まで約数見つける努力をして、それでも見つからなかったら打ち切れば良さそう。
ということで、x までの素数をリストアップしておき、その範囲内でだけ約数を探すようにした。
この問題に関しては、事前にテストケースの内容がわかっているので、
適当にいくつかの値を試して x を探すことにしたんだけど、x = 1000 で十分だった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def prime?(n)
  # Miller-Rabin primality test の実装
end

primes = 3.step(1000, 2).with_object([2]) { |n, a| a &amp;lt;&amp;lt; n if prime?(n) }

case_count.times do |t|
  n, j = gets.split(&#39; &#39;).map(&amp;amp;:to_i)

  x = &#39;0&#39; * (n - 2)

  answers = []
  while answers.size &amp;lt; j do
    coin = &amp;quot;1#{x}1&amp;quot;
    divisors = []

    2.upto(10) do |base|
      v = coin.to_i(base)

      break if prime?(v)

      divisor = primes.find { |prime| v % prime == 0 }
      break unless divisor
      divisors &amp;lt;&amp;lt; divisor
    end

    answers &amp;lt;&amp;lt; [coin, divisors] if divisors.length == 9

    next_x = (x.to_i(2) + 1).to_s(2)
    x = &amp;quot;#{&#39;0&#39; * (n - 2 - next_x.length)}#{next_x}&amp;quot;
  end

  puts &amp;quot;Case ##{t+1}:&amp;quot;
  answers.each do |coin, divs|
    puts &amp;quot;#{coin} #{divs.map(&amp;amp;:to_s).join(&#39; &#39;)}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;problem-d-fractiles:a4d47ca2ceb0ea4e1c107812a5c788b5&#34;&gt;Problem D. Fractiles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;K 枚のタイルに対して、以下の処理を C 回繰り返した K ^ C 枚のタイルがある。

&lt;ul&gt;
&lt;li&gt;タイルが L なら、オリジナルのタイル K 枚に置き換える。&lt;/li&gt;
&lt;li&gt;タイルが G なら、K 枚の G で置き換える。&lt;/li&gt;
&lt;li&gt;例: &lt;code&gt;LGL&lt;/code&gt; -&amp;gt; &lt;code&gt;LGLGGGLGL&lt;/code&gt; -&amp;gt; &lt;code&gt;LGLGGGLGLGGGGGGGGGLGLGGGLGL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;K ^ C 枚のタイルは汚れていて L か G か分からないが、S 枚だけタイルを綺麗にして L か G か判別できる。&lt;/li&gt;
&lt;li&gt;オリジナルの K 枚のタイルに G が含まれているかを、K ^ C 枚のタイルのうち S 枚以下だけ綺麗にして判定可能か、可能な場合はどれを綺麗にすれば良いか答えよ。&lt;/li&gt;
&lt;li&gt;Small/Large ともに 1 ≤ K ≤ 100、1 ≤ C ≤ 100、KC ≤ 10 ^ 18。&lt;/li&gt;
&lt;li&gt;Small は S = K、Large は 1 ≤ S ≤ K。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは全然わからなかった。んだけれども、一晩寝て、Small は S = K なんだから、オリジナルの内容全部確認できるんじゃね？と思いついた。
オリジナルの一番左が L なら、左から K 枚はオリジナルの内容になる。つまり左から K 枚みればオリジナルに G が合ったか判定可能。
一方、オリジナルの一番左が G なら、左から K 枚は全部 G になるので、もちろん判定可能。
つまり左から K 枚見るだけで判定可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case_count = gets.to_i
case_count.times do |t|
  k, c, s = gets.split(&#39; &#39;).map(&amp;amp;:to_i)

  puts &amp;quot;Case ##{t+1}: #{(1..k).to_a.join(&#39; &#39;)}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Large はわからん。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;毎年 Qualification はやるんだけど、Round 1 は参加しないで終わってしまうので、今年は予定合わせて参加する。
以前一度だけ Round 1 にも参加した時は、Round 1 は通過したけど Round 2 でダメだった。今年は Round 2 もなんとか通過したいなー。
とりあえずは Analysis 読んで勉強せねば。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>numpy で Neural Network</title>
      <link>http://tyamagu2.xyz/articles/handwritten_digits_recognition/</link>
      <pubDate>Sun, 27 Mar 2016 10:46:59 +0900</pubDate>
      
      <guid>http://tyamagu2.xyz/articles/handwritten_digits_recognition/</guid>
      <description>

&lt;p&gt;1月から &lt;a href=&#34;https://www.coursera.org/learn/machine-learning/&#34;&gt;Coursera の Machine Learning のコース&lt;/a&gt;を受講していて、先日すべての課題を提出した。
前評判通り、分かりやすくてとても良いコースだった。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/d85bca5456116786cd7fa9e8b2a4f99c&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/d85bca5456116786cd7fa9e8b2a4f99c.png&#34; alt=&#34;https://gyazo.com/d85bca5456116786cd7fa9e8b2a4f99c&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;このコースでは &lt;a href=&#34;https://www.gnu.org/software/octave/&#34;&gt;GNU Octave&lt;/a&gt; を使うんだけど、
やっぱり numpy つかってやってみたいよねー、ってことで、復習も兼ねて numpy で Neural Network を作ってみた。&lt;/p&gt;

&lt;p&gt;最終結果は github と heroku にあげておいた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tyamagu2/nnhw&#34;&gt;https://github.com/tyamagu2/nnhw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nnhw.herokuapp.com/&#34;&gt;https://nnhw.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;neural-network-で学習:2e46c32abf32e1beef0fa0df88b28661&#34;&gt;Neural Network で学習&lt;/h3&gt;

&lt;p&gt;題材はコースと同じく手書きの数字認識。学習データには定番の &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;MNIST のデータセット&lt;/a&gt;を使った。&lt;/p&gt;

&lt;p&gt;Neural Network の構成は input layer、hidden layer 1 つ、output layer の 3 層。
input layer には 28 x 28 の画像をそのまま渡すことにしたので、bias unit も合わせて 28 * 28 + 1 = 785 ユニット。
feature reduction とかはやってない。
hidden layer は 30 ~ 100 ユニットぐらいで試してみた。output layer は数字の分の 10 ユニット。
Regularization の lambda とか learning rate はいくつか試して適当に決めてしまった。あんまり検証はしてない。&lt;/p&gt;

&lt;p&gt;最初は batch gradient descent、つまり全学習データを一気に Neural Network に丸投げしていたんだけど、
それだと全然精度が出なかったので、mini-batch gradient descent で 500 個ずつ画像を渡すようにした。
batch gradient descent の時もコスト関数は収束しているようだったので、local optima にハマったのかなー。&lt;/p&gt;

&lt;p&gt;そんな感じで自分の MacBook Pro で 20 分も学習させたところ、MNIST のテストセットで 90 ~ 95% ぐらいは精度が出た。
ちなみに、数字ごとの各ピクセルの平均値を出して、ピクセルごとの差分を使って最小二乗法で分類、
というシンプルなやり方だと 82% ぐらい。なのでそれよりはマシな結果になった。&lt;/p&gt;

&lt;h3 id=&#34;手書き文字を-canvas-で入力:2e46c32abf32e1beef0fa0df88b28661&#34;&gt;手書き文字を Canvas で入力&lt;/h3&gt;

&lt;p&gt;やっぱりインタラクティブじゃないとねー、ということで、Canvas に書いた文字を認識させるようにした。
Canvas の内容を 28 x 28 にダウンサイズして Neural Network に渡している。
Web アプリのフレームワークには flask を使ってみた。
本当はダウンサイズした画像を表示したり、output layer の数値を表示したり、とかやろうかと思ったけど、
フロントエンドでいい感じに表示するのもめんどくさくて、シンプルに結果だけ表示することにした。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/8d63997affda3ed7108119e2ac513af5f52279c3/687474703a2f2f692e696d6775722e636f6d2f6f4978614931422e676966&#34; alt=&#34;gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実際には上の gif のようにバッチリ分類はしてくれない。それでも、ピクセルごとの差分の最小二乗法よりはマシな精度になったけど。&lt;/p&gt;

&lt;h3 id=&#34;heroku-にデプロイ:2e46c32abf32e1beef0fa0df88b28661&#34;&gt;Heroku にデプロイ&lt;/h3&gt;

&lt;p&gt;せっかくなので Heroku にデプロイすることにしたけど、ここで予定外と時間を使ってしまった。&lt;/p&gt;

&lt;p&gt;実は今回の Neural Network では scipy も使っている。
具体的には、sigmoid 関数として &lt;code&gt;scipy.special.expit&lt;/code&gt; を使っている。そこだけ。
これは &lt;code&gt;1.0 / (1.0  + np.exp(-x))&lt;/code&gt; ってやれば numpy でも計算できる。
でも x がある程度大きい負の数だと &lt;code&gt;np.exp(-x)&lt;/code&gt; がオーバーフローしてしまって精度が出なかった。
&lt;code&gt;math.exp(-x)&lt;/code&gt; でも同様だった。&lt;/p&gt;

&lt;p&gt;そういうわけで、heroku でも scipy をインストールしないといけないんだけど、試しに deploy したら、
heroku には scipy をインストール出来ないと言われてしまった。
調べたら &lt;a href=&#34;https://devcenter.heroku.com/articles/python-c-deps&#34;&gt;third party 製の buildpack を使えよ&lt;/a&gt;、とのことだったので、
&lt;a href=&#34;https://github.com/kennethreitz/conda-buildpack&#34;&gt;conda-buildpack&lt;/a&gt; なるものを使うことにした。
そうすると今度は conda というパッケージマネージャーを使う必要が出てきた。
それまでは全部 pip で管理してたので、pyenv で miniconda を入れて、conda でパッケージインストールして、
とやったところ、今度は flask が起動しなくなった。werkzeug がインストール済みなのにインポートできないと言われた。
しょうがないから flask は pip で管理して、numpy と scipy は conda で管理することにした。&lt;/p&gt;

&lt;p&gt;さて改めて heroku にデプロイ、したら今度は slug size が 300MB を超えてデプロイできなかった。
調べていたら&lt;a href=&#34;https://github.com/kennethreitz/conda-buildpack/issues/21&#34;&gt;こんな Issue&lt;/a&gt; が見つかった。
&lt;a href=&#34;https://www.continuum.io/blog/developer-blog/anaconda-25-release-now-mkl-optimizations&#34;&gt;この Announcement&lt;/a&gt; にも色々書いてあるけど、
mkl optimized な numpy/scipy を、optimize されてない nomkl version の numpy/scipy にしたらサイズが小さくなるので大丈夫とのこと。
というわけで nomkl 版にしてデプロイ成功。&lt;/p&gt;

&lt;h3 id=&#34;感想:2e46c32abf32e1beef0fa0df88b28661&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;やっぱり実データだと全然精度が出ない。どこかにしょーもないバグがあるかもしれないけど、まあこんなもんなんだろうなと思う。&lt;/p&gt;

&lt;p&gt;いくつか推測した原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;学習データの偏り&lt;br&gt;
いくつか学習データを表示してみた感じだと、日本人の書く数字とはちょっと感じが違う気がした。
たまたま表示したデータがそうなのかもしれないし、実際のところは分からない。
もっと regularization の lambda の調整が必要なのかもしれないし、さらに学習データを増やすべきなのかもしれない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;入力画像のプリプロセス不足&lt;br&gt;
不足というか何もしてない。中心やサイズの調整をしてあげると結果も違ってきそう。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;結局実用まで持って行くには、lambda や hidden layer の数やユニット数などのパラメータの調整、
それを助けるためのグラフを書いたりするスクリプト、実用的な速度を出すための feature selection、
色々な学習データの収集やらプリプロセスなどの泥臭い作業、なんかが必要になってくるんだろうなーと思った。
当然だけど Machine Learning とか Neural Network とか Deep Learning とかの響きに惹かれてるだけじゃ難しいですね。
数学ももっと勉強しないと。&lt;/p&gt;

&lt;p&gt;MNIST は簡単すぎるので、&lt;a href=&#34;https://www.cs.toronto.edu/~kriz/cifar.html&#34;&gt;CIFAR-10&lt;/a&gt; というデータセットでやってみると良いと教えてもらった。
こっちだと 50% ぐらいしかでない。これで 90% 出せたらすごいらしい。&lt;/p&gt;

&lt;p&gt;あと &lt;a href=&#34;http://neuralnetworksanddeeplearning.com/&#34;&gt;Neural Networks and Deep Learning&lt;/a&gt; っていう Online Book が良いらしい。
この本で色々勉強しつつ、CIFAR-10 にチャレンジするなり、もうちょっと違う何かに取り組むなりやってみようかなー。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>